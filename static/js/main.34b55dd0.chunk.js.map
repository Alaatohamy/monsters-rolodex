{"version":3,"sources":["components/card/card.js","components/card-list/card-list.js","components/search-box/search-box.js","App.js","serviceWorker.js","index.js"],"names":["Card","props","monster","className","src","id","alt","name","email","CardList","monsters","map","key","Input","placeholder","handleChange","label","type","onChange","App","state","error","searchWord","searchHandleChange","e","setState","target","value","fetch","then","response","json","data","catch","err","this","listedMonsters","filter","toLowerCase","includes","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"mUAgBeA,G,kBAbF,SAAAC,GAAU,IAEdC,EAAWD,EAAXC,QAEP,OACE,wBAAIC,UAAU,kBACZ,yBAAKC,IAAG,+BAA0BF,EAAQG,GAAlC,2BAA+DC,IAAKJ,EAAQK,OACpF,4BAAKL,EAAQK,MACb,2BAAIL,EAAQM,UCIHC,EAXE,SAAAR,GAAU,IAClBS,EAAYT,EAAZS,SACP,OACE,wBAAIP,UAAU,aAEZO,EAASC,IAAI,SAAAT,GAAO,OAAI,kBAAC,EAAD,CAAMU,IAAKV,EAAQG,GAAIH,QAASA,QCG/CW,G,MATD,SAAC,GAAwC,IAAvCC,EAAsC,EAAtCA,YAAaC,EAAyB,EAAzBA,aAAcC,EAAW,EAAXA,MACzC,OACE,8BACGA,EAAO,2BAAOb,UAAU,SAAjB,IAA2Ba,EAA3B,KAA6C,KACrD,2BAAOC,KAAK,SAASd,UAAU,SAASW,YAAaA,EAAaI,SAAUH,OCuCnEI,E,2MAvCbC,MAAO,CACLV,SAAU,GACVW,MAAO,GACPC,WAAY,I,EAYdC,mBAAqB,SAAAC,GACnB,EAAKC,SAAS,CAACH,WAAYE,EAAEE,OAAOC,S,mFAVlB,IAAD,OACjBC,MAAM,8CACLC,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAM,SAAAG,GAAI,OACT,EAAKP,SAAS,CAACf,SAAUsB,MAE1BC,MAAM,SAAAC,GAAG,OAAI,EAAKT,SAAS,CAACJ,MAAO,iC,+BAO7B,IAAD,EACgCc,KAAKf,MAApCV,EADD,EACCA,SAAUW,EADX,EACWA,MAAOC,EADlB,EACkBA,WAClBc,EACJd,EAAaZ,EAAS2B,OAAO,SAAAnC,GAAO,OAAIA,EAAQK,KAAK+B,cAAcC,SAASjB,EAAWgB,iBAAkB5B,EAE3G,OACE,yBAAKP,UAAU,OACb,wBAAIA,UAAU,eAAd,aACA,kBAAC,EAAD,CAAOY,aAAcoB,KAAKZ,mBAAoBT,YAAY,iBAAiBE,MAAM,YACjF,iCAEEK,GACA,kBAAC,EAAD,CAAUX,SAAU0B,U,GAjCZI,aCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMvB,KAAK,SAAAwB,GACjCA,EAAaC,iB","file":"static/js/main.34b55dd0.chunk.js","sourcesContent":["import React from 'react';\nimport './card.styles.css';\n\nconst Card = props => {\n\n  const {monster} = props;\n  \n  return (\n    <li className=\"card-container\">\n      <img src={`https://robohash.org/${monster.id}'?set=set4&size=180x180`} alt={monster.name}/>\n      <h1>{monster.name}</h1>\n      <p>{monster.email}</p>\n    </li>\n  );\n}\n\nexport default Card;\n","import React from 'react';\nimport './card-list.styles.css';\nimport Card from '../card/card';\n\nconst CardList = props => {\n  const {monsters} = props;\n  return (\n    <ul className=\"card-list\">\n    {\n      monsters.map(monster => <Card key={monster.id} monster={monster}/>)\n    }\n    </ul>\n  );\n}\n\nexport default CardList;","import React from 'react';\nimport './search-box.styles.css';\n\nconst Input = ({placeholder, handleChange, label}) => {\n  return (\n    <form>\n      {label? <label className=\"label\"> {label} </label> : null }\n      <input type=\"search\" className=\"search\" placeholder={placeholder} onChange={handleChange} />\n    </form>\n  )\n}\n\nexport default Input;","import React, {Component} from 'react';\nimport './App.css';\nimport CardList from './components/card-list/card-list';\nimport Input from './components/search-box/search-box';\n\nclass App extends Component{\n\n  state ={\n    monsters: [],\n    error: '',\n    searchWord: ''\n  }\n\n  componentDidMount(){\n    fetch('https://jsonplaceholder.typicode.com/users')\n    .then(response => response.json())\n    .then( data =>\n      this.setState({monsters: data})\n    )\n    .catch(err => this.setState({error: 'Something wrong happened'}));\n  }\n\n  searchHandleChange = e => {\n    this.setState({searchWord: e.target.value });\n  }\n\n  render(){\n    const {monsters, error, searchWord} = this.state;\n    const listedMonsters = \n      searchWord ? monsters.filter(monster => monster.name.toLowerCase().includes(searchWord.toLowerCase())) : monsters ;\n\n    return (\n      <div className=\"App\">\n        <h1 className=\"main-header\">Cats List</h1>\n        <Input handleChange={this.searchHandleChange} placeholder='Filter by name' label=\"Filter:\"/>\n        <section>\n        {\n          error ? error : \n          <CardList monsters={listedMonsters} />\n        }\n        </section>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}